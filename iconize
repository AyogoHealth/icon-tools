#!/bin/bash
# Copyright 2018 Ayogo Health Inc.

INKSCAPE='inkscape'

if [[ "$OSTYPE" == "darwin"* ]]; then
    INKSCAPE='/Applications/Inkscape.app/Contents/MacOS/Inkscape'

    if [ ! -f "$INKSCAPE" ]; then
        INKSCAPE='/Applications/Inkscape.app/Contents/MacOS/inkscape'
    fi
fi

$INKSCAPE --version | grep -Eq '^Inkscape 0\.'
VERSION=$?

IMAGICK='magick'
if ! command -v $IMAGICK &> /dev/null
then
    IMAGICK='convert'
fi


VERBOSE=false
WITH_ANDROID=true
WITH_IOS=true
WITH_WEB=false

# Icon sizes for iOS
SIZES=(
    AppIcon:57
    AppIcon@2x:114
    AppIcon-20x20@1x:20:white
    AppIcon-20x20@2x:40:white
    AppIcon-20x20@3x:60:white
    AppIcon-40x40@1x:40:white
    AppIcon-40x40@2x:80:white
    AppIcon-40x40@3x:120:white
    AppIcon-50x50@1x:50:white
    AppIcon-50x50@2x:100:white
    AppIcon-60x60@1x:60
    AppIcon-60x60@2x:120
    AppIcon-60x60@3x:180
    AppIcon-72x72@1x:72
    AppIcon-72x72@2x:144
    AppIcon-76x76@1x:76
    AppIcon-76x76@2x:152
    AppIcon-83.5x83.5@2x:167
    AppIcon-1024x1024@1x:1024
    AppIcon-29x29@1x:29:white
    AppIcon-29x29@2x:58:white
    AppIcon-29x29@3x:87:white
    AppIcon-24x24@2x:48:white
    AppIcon-27.5x27.5@2x:55:white
    AppIcon-44x44@2x:88:white
    AppIcon-86x86@2x:172:white
    AppIcon-98x98@2x:196:white
)

# Icon sizes for Android
DENSITIES=(
    ldpi:36
    mdpi:48
    hdpi:72
    xhdpi:96
    xxhdpi:144
    xxxhdpi:192
)

# Icon sizes for web favicons
FAVICONS=(
    icon-16:16
    icon-32:32
    icon-48:48
    icon-192:192
    icon-512:512
    apple-touch-icon:180
)

BACKGROUND="transparent"
FORCE_BACKGROUND=false

USAGE="Usage: $0 [-d] [-b COLOR] [--force-bg] INPUTFILE [OUTPUTDIR]
\n
\nThis tool generates app icons for iOS and Android apps from the SVG file given in INPUTFILE. It is expected that the input file is an SVG with a canvas size of 192Ã—192 with a transparent background. A solid background colour can be added to the output via the --background (-b) option.
\nIf OUTPUTDIR is not specified, it defaults to a folder named 'out' in the current directory.
\n
\nNOTE: This script requires the following tools to be installed and available:
\n\tInkscape\t-- https://inkscape.org/
\n\tpngquant\t-- https://pngquant.org/
\n\tzopflipng\t-- https://github.com/google/zopfli
\n\tImageMagick\t-- https://imagemagick.org/
\n
\nOptions:
\n\t-h
\n\t--help\t\tPrint this message.
\n
\n\t-d
\n\t--debug
\n\t-v
\n\t--verbose\tTurn on debugging output.
\n
\n\t-b
\n\t--background\tSet the background colour.
\n
\n\t--force-bg\tAlways use the specified background colour, not white.
\n
\n\t--ios\t\tGenerate iOS icons (default).
\n\t--no-ios\tDo not generate iOS icons.
\n
\n\t--android\tGenerate Android icons (default).
\n\t--no-android\tDo not generate Android icons.
\n
\n\t--web\t\tGenerate web favicons.
\n\t--no-web\tDo not generate web favicons (default)."

while getopts ":dhb:-:" opt; do
    case $opt in
        b)
            BACKGROUND=${OPTARG}
            ;;
        v)
            set -x
            VERBOSE=true
            ;;
        d)
            set -x
            VERBOSE=true
            ;;
        h)
            echo -e $USAGE
            exit
            ;;
        -)
            case "${OPTARG}" in
                verbose)
                    set -x
                    VERBOSE=true
                    ;;
                debug)
                    set -x
                    VERBOSE=true
                    ;;
                background=*)
                    BACKGROUND=${OPTARG#*=}
                    ;;
                force-bg)
                    FORCE_BACKGROUND=true
                    ;;
                no-ios)
                    WITH_IOS=false
                    ;;
                no-android)
                    WITH_ANDROID=false
                    ;;
                no-web)
                    WITH_WEB=false
                    ;;
                ios)
                    WITH_IOS=true
                    ;;
                android)
                    WITH_ANDROID=true
                    ;;
                web)
                    WITH_WEB=true
                    ;;
                help)
                    echo -e $USAGE
                    exit
                    ;;
            esac
            ;;
    esac
done

shift "$((OPTIND-1))"

SAVEIFS=$IFS

if [ -z "$1" ]; then
    echo -e $USAGE
    exit
fi

checktool() {
    if ! command -v $@ &> /dev/null
    then
        echo "$@ not be found" 1>&2;
        echo -e $USAGE
        exit
    fi
}

checktool pngquant
checktool zopflipng
checktool $INKSCAPE
checktool $IMAGICK


if [ "$VERBOSE" = true ]; then
    echo "Android: $WITH_ANDROID ; iOS: $WITH_IOS ; web: $WITH_WEB"
fi

OUTDIR=${2:-out}

# Generate our iOS icons
if [ "$WITH_IOS" = true ]; then
    mkdir -p "$OUTDIR/ios"
    mkdir -p "$OUTDIR/tmp"

    for size in "${SIZES[@]}"; do
        IFS=':' read -ra ICON <<< "$size";

        BGCOL="${ICON[2]:-$BACKGROUND}"
        if [ "$FORCE_BACKGROUND" = true ]; then
            BGCOL=$BACKGROUND
        fi

        OPACITY=$([[ "$BGCOL" == "transparent" ]] && echo "0.0" || echo "1.0")

        if [ $VERSION -eq 0 ]; then
            $INKSCAPE -b "$BGCOL" -h "${ICON[1]}" -w "${ICON[1]}" -e "$OUTDIR/tmp/${ICON[0]}.png" "$1"
        else
            $INKSCAPE -b "$BGCOL" -y $OPACITY -h "${ICON[1]}" -w "${ICON[1]}" -o "$OUTDIR/tmp/${ICON[0]}.png" "$1"
        fi

        pngquant --strip --speed 1 "$OUTDIR/tmp/${ICON[0]}.png"
        rm "$OUTDIR/tmp/${ICON[0]}.png"
        zopflipng -m "$OUTDIR/tmp/${ICON[0]}-fs8.png" "$OUTDIR/ios/${ICON[0]}.png"
        rm "$OUTDIR/tmp/${ICON[0]}-fs8.png"
    done

    rmdir "$OUTDIR/tmp"
fi


# Generate our Android icons
if [ "$WITH_ANDROID" = true ]; then
    mkdir -p "$OUTDIR/android"
    mkdir -p "$OUTDIR/tmp"

    TEMPLATE_HEAD='<?xml version="1.0" encoding="utf-8"?>\n<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 192 192">\n<defs>\n  <clipPath id="androidMask">\n    <rect x="20" y="20" rx="12" ry="12" height="152" width="152"></rect>\n  </clipPath>\n</defs>\n<rect x="0" y="0" height="192" width="192" fill="'"${BACKGROUND}"'" clip-path="url(#androidMask)"/>'
    TEMPLATE_TAIL='<use xlink:href="#iconize-base" x="20" y="20" width="152" height="152" clip-path="url(#androidMask)"></use>\n</svg>'

    CIRC_TEMPLATE_HEAD='<?xml version="1.0" encoding="utf-8"?>\n<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 192 192">\n<defs>\n  <clipPath id="androidMask">\n    <rect x="8" y="8" rx="50%" ry="50%" height="176" width="176"></rect>\n  </clipPath>\n</defs>\n<rect x="0" y="0" height="192" width="192" fill="'"${BACKGROUND}"'" clip-path="url(#androidMask)"/>'
    CIRC_TEMPLATE_TAIL='<use xlink:href="#iconize-base" x="8" y="8" width="176" height="176" clip-path="url(#androidMask)"></use>\n</svg>'

    STORE_TEMPLATE_HEAD='<?xml version="1.0" encoding="utf-8"?>\n<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 192 192">\n<rect x="0" y="0" height="192" width="192" fill="'"${BACKGROUND}"'" />'
    STORE_TEMPLATE_TAIL='<use xlink:href="#iconize-base" x="20" y="20" width="152" height="152" clip-path="url(#androidMask)"></use>\n</svg>'

    echo -e $TEMPLATE_HEAD > "$OUTDIR/tmp/android.svg"
    sed -e 's/<\?xml.*\?>//' -e 's/<svg/<symbol id="iconize-base"/' -e 's/ *xmlns="[^\"]*"//' -e 's/<\/svg/<\/symbol/' $1 >> "$OUTDIR/tmp/android.svg"
    echo -e $TEMPLATE_TAIL >> "$OUTDIR/tmp/android.svg"

    echo -e $CIRC_TEMPLATE_HEAD > "$OUTDIR/tmp/android-round.svg"
    sed -e 's/<\?xml.*\?>//' -e 's/<svg/<symbol id="iconize-base"/' -e 's/ *xmlns="[^\"]*"//' -e 's/<\/svg/<\/symbol/' $1 >> "$OUTDIR/tmp/android-round.svg"
    echo -e $CIRC_TEMPLATE_TAIL >> "$OUTDIR/tmp/android-round.svg"

    for size in "${DENSITIES[@]}"; do
        IFS=':' read -ra ICON <<< "$size";

        if [ $VERSION -eq 0 ]; then
            $INKSCAPE -h "${ICON[1]}" -w "${ICON[1]}" -e "$OUTDIR/tmp/${ICON[0]}.png" "$OUTDIR/tmp/android.svg"
            $INKSCAPE -h "${ICON[1]}" -w "${ICON[1]}" -e "$OUTDIR/tmp/${ICON[0]}-round.png" "$OUTDIR/tmp/android-round.svg"
        else
            $INKSCAPE -h "${ICON[1]}" -w "${ICON[1]}" -o "$OUTDIR/tmp/${ICON[0]}.png" "$OUTDIR/tmp/android.svg"
            $INKSCAPE -h "${ICON[1]}" -w "${ICON[1]}" -o "$OUTDIR/tmp/${ICON[0]}-round.png" "$OUTDIR/tmp/android-round.svg"
        fi

        mkdir -p "$OUTDIR/android/mipmap-${ICON[0]}"

        pngquant --strip --speed 1 "$OUTDIR/tmp/${ICON[0]}.png"
        rm "$OUTDIR/tmp/${ICON[0]}.png"
        zopflipng -m "$OUTDIR/tmp/${ICON[0]}-fs8.png" "$OUTDIR/android/mipmap-${ICON[0]}/ic_launcher.png"
        rm "$OUTDIR/tmp/${ICON[0]}-fs8.png"

        pngquant --strip --speed 1 "$OUTDIR/tmp/${ICON[0]}-round.png"
        rm "$OUTDIR/tmp/${ICON[0]}-round.png"
        zopflipng -m "$OUTDIR/tmp/${ICON[0]}-round-fs8.png" "$OUTDIR/android/mipmap-${ICON[0]}/ic_launcher_round.png"
        rm "$OUTDIR/tmp/${ICON[0]}-round-fs8.png"
    done


    # Store Icon: No transparency, no rounded corners
    echo -e $STORE_TEMPLATE_HEAD > "$OUTDIR/tmp/android.svg"
    sed -e 's/<\?xml.*\?>//' -e 's/<svg/<symbol id="iconize-base"/' -e 's/ *xmlns="[^\"]*"//' -e 's/<\/svg/<\/symbol/' $1 >> "$OUTDIR/tmp/android.svg"
    echo -e $STORE_TEMPLATE_TAIL >> "$OUTDIR/tmp/android.svg"

    if [ $VERSION -eq 0 ]; then
        $INKSCAPE -h "512" -w "512" -e "$OUTDIR/tmp/store.png" "$OUTDIR/tmp/android.svg"
    else
        $INKSCAPE -h "512" -w "512" -o "$OUTDIR/tmp/store.png" "$OUTDIR/tmp/android.svg"
    fi

    pngquant --strip --speed 1 "$OUTDIR/tmp/store.png"
    rm "$OUTDIR/tmp/store.png"
    zopflipng -m "$OUTDIR/tmp/store-fs8.png" "$OUTDIR/android/store.png"
    rm "$OUTDIR/tmp/store-fs8.png"
    # End Store Icon

    rm "$OUTDIR/tmp/android.svg"
    rm "$OUTDIR/tmp/android-round.svg"
    rmdir "$OUTDIR/tmp"
fi


# Generate web favicons
if [ "$WITH_WEB" = true ]; then
    mkdir -p "$OUTDIR/web"
    mkdir -p "$OUTDIR/tmp"

    OPACITY=$([[ "$BACKGROUND" == "transparent" ]] && echo "0.0" || echo "1.0")

    for size in "${FAVICONS[@]}"; do
        IFS=':' read -ra ICON <<< "$size";

        if [ $VERSION -eq 0 ]; then
            $INKSCAPE -b "$BACKGROUND" -h "${ICON[1]}" -w "${ICON[1]}" -e "$OUTDIR/tmp/${ICON[0]}.png" "$1"
        else
            $INKSCAPE -b "$BACKGROUND" -y $OPACITY -h "${ICON[1]}" -w "${ICON[1]}" -o "$OUTDIR/tmp/${ICON[0]}.png" "$1"
        fi

        pngquant --strip --speed 1 "$OUTDIR/tmp/${ICON[0]}.png"
        rm "$OUTDIR/tmp/${ICON[0]}.png"
        zopflipng -m "$OUTDIR/tmp/${ICON[0]}-fs8.png" "$OUTDIR/web/${ICON[0]}.png"
        rm "$OUTDIR/tmp/${ICON[0]}-fs8.png"
    done

    $IMAGICK "$OUTDIR/web/icon-16.png" "$OUTDIR/web/icon-32.png" "$OUTDIR/web/icon-48.png" -colors 256 "$OUTDIR/web/favicon.ico"
    rm "$OUTDIR/web/icon-16.png"
    rm "$OUTDIR/web/icon-32.png"
    rm "$OUTDIR/web/icon-48.png"

    rmdir "$OUTDIR/tmp"
fi

IFS=$SAVEIFS
